package com.lasthw;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class SCCount {
    int V;
    ArrayList<Integer> adj1;
    DirectedGraph graph;
    DirectedGraph rGraph;
    int [] finials;
    int fNum;
    private final LinkedList<Integer>[] adj;
    int currentSize;
    static int currentMax;
    int Count;
    String val;

    public SCCount (int n) {
        graph = new DirectedGraph(n);
        rGraph = new DirectedGraph(n);
        finials = new int[n];
        fNum = 0;
        V = n;
        currentSize = 0;
        val = " ";
        currentMax = 0;
        Count = 0;
        adj = new LinkedList[n];
        for (int i = 0; i < n; ++i) {
            adj[i] = new LinkedList<Integer>();
        }
    }

    public void SCCount(int s, boolean[] visitedVertices) {
        visitedVertices[s] = true;
        currentSize = 0;
        int n;
        Iterator<Integer> i = adj[s].iterator();
        while (i.hasNext()) {
            n = i.next();
            if (!visitedVertices[n]) SCCount(n, visitedVertices);
            currentSize++;
            if(currentSize > currentMax){
                currentMax = currentSize;}
        }
    }


    public void readFile(String filePath){
        filePath = "/Users/jessicabajerek/homework10/src/com/lasthw/Slashdot0902.txt";
        try {
            Scanner scanner = new Scanner(new File(filePath));
            for (int i = 0; i < 4; i++) {
                String curr = scanner.nextLine();
            }//Skip through the top options needed
            while (scanner.hasNextLine()) {
                String currentLine = scanner.nextLine();
                String[] currentLineArray = currentLine.split("\t");
                graph.addEdge(Integer.parseInt(currentLineArray[0]), Integer.parseInt(currentLineArray[1]));
                rGraph.addEdge(Integer.parseInt(currentLineArray[1]), Integer.parseInt(currentLineArray[0]));
            }//graoh and r graph both take in on the option
            scanner.close();//tries some ways with catch
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    // Add edge
    public void addEdge(int s, int d) {
        adj[s].add(d);
    }


    // Transpose the graph
    public SCCount transpose() {
        SCCount g = new SCCount(V);
        for (int s = 0; s < V; s++) {
            Iterator<Integer> i = adj[s].listIterator();
            while (i.hasNext()){
                g.adj[i.next()].add(s);}
        }
        return g;
    }

    public void inorder(int s, boolean[] visitedVertices, Stack<Integer> stack) {
        visitedVertices[s] = true;

        for (int n : adj[s]) {
            if (!visitedVertices[n])
                inorder(n, visitedVertices, stack);
        }
        stack.push(s);
    }


    public void firstToPutIn() {
        ArrayList<Integer> in;
        for (int i = 0; i < graph.numVertex; i++) {
            in = graph.dGraph.get(i).inList;
            for (int j = 0; j < in.size(); j++) {
                finials[fNum] = graph.postOrderDFT(j);
            }
            fNum++;
//            finishing[finishingNumber]=(graph.postOrderDFT(i));
        }
    }

        public void display() {
            readFile(val);
            Stack<Integer> stack = new Stack<>();
            boolean[] visitedVertices = new boolean[V];
            for (int i = 0; i < V; i++)
                visitedVertices[i] = false;
            firstToPutIn();
            for (int i = 0; i < V; i++)
                if (!visitedVertices[i])
                    inorder(i, visitedVertices, stack);

            SCCount gr = transpose();

            for (int i = 0; i < V; i++)
                visitedVertices[i] = false;

            while (!stack.empty()) {
                int s = (int) stack.pop();
                if (!visitedVertices[s]) {
                    gr.SCCount(s, visitedVertices);
//                System.out.println();
                    Count++;
                }
            }
            System.out.println("Number of SCC: " + Count);
        }




    public static void main(String[] args) {

        String filePath = "/Users/jessicabajerek/homework10/src/com/lasthw/Slashdot0902.txt";
        int numberOfVertices = 82168;
        int numberOfVerticesOther= 8; //if this needs to be uased for smaller EXAMEPLE
        //CODE COMPRESSION IS IFFY
        SCCount g = new SCCount(numberOfVertices);
//        g.addEdge(0, 1);
//        g.addEdge(1, 2);
//        g.addEdge(2, 3);
//        g.addEdge(2, 4);
//        g.addEdge(3, 0);
//        g.addEdge(4, 5);
//        g.addEdge(5, 6);
//        g.addEdge(6, 4);
//        g.addEdge(6, 7);
        try {
            Scanner scanner = new Scanner(new File(filePath));
            // skip first 4 lines of the file //first four lines are just general nformation
            for (int i = 0; i < 4; i++){
                String curr = scanner.nextLine();
            }

            // populate graph
            while (scanner.hasNextLine()) {
                String currentLine = scanner.nextLine();
                String[] currentLineArray = currentLine.split("\t");
//                graph.addEdge(Integer.parseInt(currentLineArray[0]), Integer.parseInt(currentLineArray[1]));
//                reverseGraph.addEdge(Integer.parseInt(currentLineArray[1]), Integer.parseInt(currentLineArray[0]));
                g.addEdge(Integer.parseInt(currentLineArray[0]), Integer.parseInt(currentLineArray[1]));
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        System.out.println("Strongly Connected Components:");
        g.display();
        System.out.println("max size = " + currentMax);

    }
}

