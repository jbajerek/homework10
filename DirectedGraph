package com.lasthw;
import java.util.*;

public class DirectedGraph {
    ArrayList<DirectedNodeList> dGraph;
    int numVertex;
    boolean[] marked;
   // HashMap<Integer, List<Integer>> adjList;
    // Map to maintain visit status
    //HashMap<Integer, Boolean> visitedStatus;
    //Map to maintain adjacency List
    //ended up not using, but remeber can be to help with moving through

    public DirectedGraph(int n) {
        //this.adjList = new HashMap<Integer, List<Integer>>();
        //this.visitedStatus = new HashMap<Integer, Boolean>();
        numVertex = n;
        dGraph = new ArrayList<>(n);
        marked = new boolean[n];
        for (int i = 0; i < numVertex; i++)
            dGraph.add(new DirectedNodeList());
    }

    public void addEdge(int u, int v) {
        // assume all vertices are created
        // directed edge u to v will cause outdegree of u to go up and indegree of v to go up.
        if (u >= 0 && u < numVertex && v >= 0 && v < numVertex) {
            if (u != v) {
                getNeighborList(u).addToOutList(v);
                getNeighborList(v).addToInList(u);
            }
        } else throw new IndexOutOfBoundsException();
    }


    public DirectedNodeList getNeighborList(int u) {
        return dGraph.get(u);
    }

    public void printAdjacency(int u) {
        DirectedNodeList dnl = getNeighborList(u);
        System.out.println("vertices going into " + u + "  " + dnl.getInList());
        System.out.println("vertices going out of " + u + "  " + dnl.getOutList());
        System.out.println();
    }

    public void postOrderDepthFirstTraversal(){
        for (int i = 0; i < numVertex; i++)
            if (!marked[i])
                postOrderDFT(i);

    }

    public int postOrderDFT(int v) {
        marked[v] = true;
        for (Integer u : dGraph.get(v).getOutList())
            if (!marked[u]) postOrderDFT(u);
        System.out.println(v);
        return v;
    }

    public void depthFirstTraversal() {
        for (int i = 0; i < numVertex; i++)
            if (!marked[i])
                dFT(i);

    }

    public void dFT(int v) {
        System.out.println(v);
        marked[v] = true;

        for (Integer u : dGraph.get(v).getOutList())
            if (!marked[u]) dFT(u);

    }
}


